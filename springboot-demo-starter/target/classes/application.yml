# yaml 语法：
# 大小写敏感
# 数据要前面有空格，否则数据不被识别
# 使用缩进表示层级关系，缩进与空格数无关，但是同级的缩进空格数必须相同
#

# 数据的三种绑定方式：
# @value(字符串替换: ${})
# Environment # 注入 Environment bean
# @ConfigurationProperties(prefix="key") # key 指 yml 中从顶级位置开始读取的对象名

# 纯量字符串：单个的，不可再分的值
singleQuoteNoConvert: 'hello \n world' # 单引号忽略转义字符
doubleQuoteHaveConvert: "hello \n world" # 双引号识别转义字符

properties:
  nameInner: drift-bottle  # 通过 @Value 注入
  array: # 注入数组
    - one
    - two
  arrayInline: [ one, two ] # 数组行内写法
  user: # 注入对象
    name: melong
    age: 24
  userInline: { name: melong-inline, age: 24 } # 注入对象，行内写法
  list: # 注入 List 集合
    - one
    - two
  array-separated: one, two  # 逗号分隔的数组
  extendsProperties: is extends properties # 通过继承配置类注入属性
  hierarchical: # @ConfigurationProperties 注入深层嵌套的对象
    name: hierarchical object
    value: 1
    map: # 所有的配置属性都是以 key: value 形式存在，因此 Map<String, Object> 可以接收所有类型的 yml 配置属性
      key: value

# ---------------------------
# profile 配置方式：
# 多 profile 文件方式：创建多个后缀名不同的配置文件，
# 如：application-dev.properties，要在主配置中激活副配置：spring.profiles.active = 副配置文档名
# yml 多文档方式：以 " --- " 划分开，在文档配置外也要激活配置：spring.profiles.active = 副配置文档名
spring:
  profiles:
    active: pro

---
spring:
  config:
    activate:
      on-profile: dev # 约定配置文档名称

server:
  port: 8081 #修改端口

---
spring:
  config:
    activate:
      on-profile: pro

server:
  port: 8083


#运行jar文件时命令行配置：文件后边加 --命令，也可以设置外部的配置文件

---
# redis 配置
spring:
  redis:
    host: 127.0.0.1
    port: 6379
---
# mybatis datasource 配置
spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/test
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
